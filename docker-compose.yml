version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: auth-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: devops_platform
      MYSQL_USER: devops_user
      MYSQL_PASSWORD: devops_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - auth-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: auth-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - auth-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: auth-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - auth-network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: auth-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - auth-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "kafka:29092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI (Optional - for development) - 포트 변경: 8081 -> 8079
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: auth-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8079:8080"  # MSA 포트 충돌 방지를 위해 8079로 변경
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - auth-network

  # Authentication Service
  auth-service:
    build: .
    container_name: auth-service
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      # Database
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/devops_platform?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: devops_user
      SPRING_DATASOURCE_PASSWORD: devops_password
      
      # Redis
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      
      # Kafka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      
      # Auth0 (환경변수로 설정하거나 .env 파일 사용)
      AUTH0_DOMAIN: ${AUTH0_DOMAIN:-dev-your-domain.us.auth0.com}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID:-your-client-id}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET:-odE2aRjgMFvAas3dBcDHcgDgiqJ9RJDxFObkOoiOwu162gJOFBV5duwdS1EMy7Od}
      AUTH0_AUDIENCE: ${AUTH0_AUDIENCE:-https://api.devops-platform.com}
      
      # JVM Options
      JAVA_OPTS: -Xmx512m -Xms256m -XX:+UseG1GC
    networks:
      - auth-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Prometheus for metrics collection (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: auth-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - auth-network
    depends_on:
      - auth-service

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  auth-network:
    driver: bridge