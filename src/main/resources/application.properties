# Default configuration  
spring.application.name=authentication-service
server.port=8080

# Eureka Client Configuration - temporarily disabled
# eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
# eureka.instance.prefer-ip-address=true

# Allow bean definition overriding (for Spring Cloud compatibility)
spring.main.allow-bean-definition-overriding=true

# Reactive web application for Gateway functionality
spring.main.web-application-type=reactive

# OAuth 2.0 Configuration (자체 구현)
oauth.jwt.secret=${OAUTH_JWT_SECRET}
oauth.jwt.access-token-expiration=3600
oauth.jwt.refresh-token-expiration=2592000
oauth.issuer=https://auth.devops-platform.com
oauth.authorization-code-expiration=600

# Database Configuration
spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3306/devtrip-authentication?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true}
spring.datasource.username=${DB_USERNAME:devtrip_user}
spring.datasource.password=${DB_PASSWORD:devtrip_password}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.open-in-view=false

# Redis Configuration (로그인 시도 제한용)
spring.redis.enabled=true
spring.redis.host=${REDIS_HOST}
spring.redis.port=${REDIS_PORT}
spring.redis.timeout=2000ms
spring.redis.lettuce.pool.max-active=8
spring.redis.lettuce.pool.max-idle=8
spring.redis.lettuce.pool.min-idle=2
spring.redis.database=0

# MSA 공유 Kafka 클러스터 설정
spring.kafka.enabled=true
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# MSA 환경: 각 서비스마다 고유한 consumer group
spring.kafka.consumer.group-id=auth-service-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# MSA 공유 Kafka 클러스터 추가 설정
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=1000
spring.kafka.producer.acks=1
spring.kafka.producer.retries=3
spring.kafka.producer.batch-size=16384

# 기존 설정 (개발환경용) - 필요시 주석 해제
# spring.kafka.bootstrap-servers=localhost:9092
# spring.kafka.consumer.group-id=auth-service-dev-group

# Actuator & Monitoring (표준 설정)
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.endpoint.health.show-components=when-authorized
management.endpoint.info.enabled=true
management.metrics.export.prometheus.enabled=true
management.health.defaults.enabled=true
management.health.diskspace.enabled=true
management.health.db.enabled=true
management.health.kafka.enabled=false
management.health.redis.enabled=false
management.health.mail.enabled=false

# Application Info
info.app.name=${spring.application.name}
info.app.version=@project.version@
info.app.description=DevTrip Authentication Service - OAuth2 & API Gateway

# Logging Configuration
logging.level.ac.su.kdt=DEBUG
logging.level.org.springframework.security=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# JWT Configuration (Legacy - OAuth 설정으로 대체됨)
# jwt.secret=your-256-bit-secret  
# jwt.expiration=86400000

# 소셜 로그인 Configuration
oauth.social.google.client-id=${GOOGLE_CLIENT_ID}
oauth.social.google.client-secret=${GOOGLE_CLIENT_SECRET}
oauth.social.google.redirect-uri=http://localhost:8080/oauth/social/google/callback

oauth.social.kakao.client-id=${KAKAO_CLIENT_ID}
oauth.social.kakao.client-secret=${KAKAO_CLIENT_SECRET}  
oauth.social.kakao.redirect-uri=http://localhost:8080/oauth/social/kakao/callback

# API Gateway Configuration
gateway.routes[0].service-name=payment
gateway.routes[0].base-url=http://localhost:8081
gateway.routes[0].auth-required=true
gateway.routes[0].description=결제 서비스

gateway.routes[1].service-name=user
gateway.routes[1].base-url=http://localhost:8082
gateway.routes[1].auth-required=true
gateway.routes[1].description=사용자 관리 서비스

gateway.routes[2].service-name=mission
gateway.routes[2].base-url=http://localhost:8083
gateway.routes[2].auth-required=true
gateway.routes[2].description=미션 서비스

gateway.routes[3].service-name=ai
gateway.routes[3].base-url=http://localhost:8084
gateway.routes[3].auth-required=true
gateway.routes[3].description=AI 서비스

gateway.routes[4].service-name=monitoring
gateway.routes[4].base-url=http://localhost:8085
gateway.routes[4].auth-required=true
gateway.routes[4].description=모니터링 서비스

# Email Configuration (로컬 인증용) - 개발 환경에서는 비활성화
# spring.mail.host=smtp.gmail.com
# spring.mail.port=587
# spring.mail.username=your-email@gmail.com
# spring.mail.password=your-app-password
# spring.mail.properties.mail.smtp.auth=true
# spring.mail.properties.mail.smtp.starttls.enable=true

# 개발 환경용 이메일 설정 (콘솔 출력)
spring.mail.host=localhost
spring.mail.port=25
spring.mail.test-connection=false

# ============================================================================
# Spring Cloud Gateway 설정 (통합 API Gateway)
# ============================================================================
spring.cloud.gateway.enabled=true
spring.cloud.gateway.discovery.locator.enabled=false

# Spring Cloud 호환성 검증 비활성화 (Spring Boot 3.5.4 호환성 이슈 해결)
spring.cloud.compatibility-verifier.enabled=false

# CORS Configuration for WebSocket and HTTP
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-origins=http://localhost:3000,http://localhost:8080,ws://localhost:8080,wss://localhost:8080
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-headers=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].allow-credentials=true

# External Services URLs
app.services.mission.url=http://localhost:8083
app.services.user.url=http://localhost:8082
app.services.payment.url=http://localhost:8081
app.services.ai.url=http://localhost:8084
app.services.monitoring.url=http://localhost:8085