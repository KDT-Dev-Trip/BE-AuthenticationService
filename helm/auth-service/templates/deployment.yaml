apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "auth-service.fullname" . }}
  labels:
    {{- include "auth-service.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "auth-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "auth-service.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name | default (include "auth-service.fullname" .) }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.registry }}{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.service.targetPort }}
          protocol: TCP
        - name: management
          containerPort: 8081
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: {{ .Values.env.springProfilesActive | quote }}
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secretName }}
              key: {{ .Values.database.urlKey }}
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secretName }}
              key: {{ .Values.database.usernameKey }}
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.database.secretName }}
              key: {{ .Values.database.passwordKey }}
        - name: SPRING_REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.redis.configMapName }}
              key: {{ .Values.redis.hostKey }}
        - name: SPRING_REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.redis.configMapName }}
              key: {{ .Values.redis.portKey }}
        - name: SPRING_REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.redis.secretName }}
              key: {{ .Values.redis.passwordKey }}
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Values.jwt.secretName }}
              key: {{ .Values.jwt.secretKey }}
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.kafka.configMapName }}
              key: {{ .Values.kafka.bootstrapServersKey }}
        - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
          value: {{ .Values.env.managementEndpointsWebExposureInclude | quote }}
        - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
          value: {{ .Values.env.managementEndpointHealthShowDetails | quote }}
        - name: LOGGING_LEVEL_ROOT
          value: {{ .Values.env.loggingLevelRoot | quote }}
        - name: JAVA_OPTS
          value: {{ .Values.env.javaOpts | quote }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: {{ .Values.healthCheck.liveness.path }}
            port: {{ .Values.healthCheck.liveness.port }}
          initialDelaySeconds: {{ .Values.healthCheck.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthCheck.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.healthCheck.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.healthCheck.liveness.failureThreshold }}
          successThreshold: {{ .Values.healthCheck.liveness.successThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.healthCheck.readiness.path }}
            port: {{ .Values.healthCheck.readiness.port }}
          initialDelaySeconds: {{ .Values.healthCheck.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthCheck.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.healthCheck.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.healthCheck.readiness.failureThreshold }}
          successThreshold: {{ .Values.healthCheck.readiness.successThreshold }}
        startupProbe:
          httpGet:
            path: {{ .Values.healthCheck.startup.path }}
            port: {{ .Values.healthCheck.startup.port }}
          initialDelaySeconds: {{ .Values.healthCheck.startup.initialDelaySeconds }}
          periodSeconds: {{ .Values.healthCheck.startup.periodSeconds }}
          timeoutSeconds: {{ .Values.healthCheck.startup.timeoutSeconds }}
          failureThreshold: {{ .Values.healthCheck.startup.failureThreshold }}
          successThreshold: {{ .Values.healthCheck.startup.successThreshold }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 10 }}
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
        - name: config-volume
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: logs
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: config-volume
        configMap:
          name: {{ .Values.configMap.name }}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}